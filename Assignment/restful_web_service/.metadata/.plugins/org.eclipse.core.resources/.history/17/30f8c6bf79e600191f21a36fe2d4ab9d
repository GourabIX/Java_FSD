package com.zensar.services;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import com.zensar.daos.ProductDao;
import com.zensar.entities.Product;

public class ProductServiceImpl implements ProductService {
	
	private ProductDao productDao;
	
	public ProductServiceImpl() {
		productDao = (ProductDao) new ProductServiceImpl();
	}
	
	@Override
	public List<Product> findAllProducts() {
		return productDao.getAll();
	}

	@Override
	public Product findProductById(int productId) {
		return productDao.getById(productId);
	}

	@Override
	public void addProduct(Product product) {
		productDao.insert(product);
	}

	@Override
	public void updateProduct(Product product) {
		productDao.update(product);
	}

	@Override
	public void removeProduct(Product product) {
		productDao.delete(product);
	}

	@Override
	public List<Product> findProductsByPriceRange(double priceMin, double priceMax) {		
		List<Product> listOfAllProducts = productDao.getAll();
		List<Product> listOfProductsInPriceRange = new ArrayList<Product>();
		for (Product currentProduct: listOfAllProducts)
		{
			if (currentProduct.getPrice() <= priceMax && currentProduct.getPrice() >= priceMin)
			{
				listOfProductsInPriceRange.add(currentProduct);
			}
		}
		return listOfProductsInPriceRange;
	}

	@Override
	public List<Product> findProductsByName(String productName) {
		List<Product> listOfAllProducts = productDao.getAll();
		List<Product> listOfProductsContainingProductName = new ArrayList<Product>();
		for (Product currentProduct: listOfAllProducts)
		{
			if (currentProduct.getName().contains(productName))
			{
				listOfProductsContainingProductName.add(currentProduct);
			}
		}
		return listOfProductsContainingProductName;
	}

	@Override
	public List<Product> findProductsByBrand(String productBrand) {
		List<Product> listOfAllProducts = productDao.getAll();
		List<Product> listOfProductsOfBrand = new ArrayList<Product>();
		for (Product currentProduct: listOfAllProducts)
		{
			if (currentProduct.getBrand().equals(currentProduct.getBrand()))
			{
				listOfProductsOfBrand.add(currentProduct);
			}
		}
		return listOfProductsOfBrand;
	}

	@Override
	public long getProductCount() {
		List<Product> listOfAllProducts = productDao.getAll();
		return listOfAllProducts.size();
	}

}
